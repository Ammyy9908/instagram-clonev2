import Head from "next/head";
import Link from "next/link";
import React from "react";
import LogoutModal from "../components/LogoutModal/LogoutModal";
import Navbar from "../components/Navbar/Navbar";
import Post from "../components/Post/Post";
import styles from "../styles/Home.module.css";
import { firebase } from "../firebaseConfig";
import io from "socket.io-client";
import { getAuth, onAuthStateChanged } from "firebase/auth";
import getAllPosts from "../utils/getAllPosts";
import BlankPostCard from "../components/BlankPostCard/BlankPostCard";
import getMyIp from "../utils/getIp";
import updateLastIp from "../utils/updateLastIp";
import useUnload from "../hooks/useUnload";
import {
  collection,
  query,
  where,
  onSnapshot,
  getFirestore,
} from "firebase/firestore";
import getCurrentUserData from "../utils/getUser";
import { useRouter } from "next/router";
import NewPostModal from "../components/NewPostModal/NewPostModal";
import RefreshToast from "../components/RefreshToast/RefreshToast";
import updateStatus from "../utils/updateStatus";
import { getDatabase, ref, onDisconnect } from "firebase/database";
import Progress from "../components/Progress/Progress";
const auth = getAuth();
const db = getFirestore();
const realtime_db = getDatabase();
let socket = false;

export default function Home() {
  const [logout, setLogout] = React.useState(false);
  const [user, setUser] = React.useState(false);
  const [photos, setPhotos] = React.useState([]);
  const [newPost, setNewPost] = React.useState(false);
  const [coords, setCoords] = React.useState(null);
  const [refresh, setRefresh] = React.useState(false);
  const [loaded, setLoaded] = React.useState(false);
  const [ip, setIp] = React.useState(null);
  const [mounted, setMounted] = React.useState(false);
  const [emojis, setEmojis] = React.useState(null);
  const [skt, setSocket] = React.useState(null);

  const router = useRouter();

  React.useEffect(() => {
    if (user) {
      socket = io("https://nextinstaserver.herokuapp.com/", {
        // [1] Important as fuck
        reconnectionDelay: 1000,
        reconnection: true,
        reconnectionAttempts: 10,
        transports: ["websocket"],
        agent: false, // [2] Please don't set this to true
        upgrade: false,
        rejectUnauthorized: false,
      });
      socket.emit("join", { user: user.uid });
      setSocket(socket);
    }
  }, [user]);

  React.useEffect(() => {
    onAuthStateChanged(auth, async (user) => {
      if (user) {
        // User is signed in, see docs for a list of available properties
        // https://firebase.google.com/docs/reference/js/firebase.User
        const uid = user && user.uid ? user.uid : null;

        const u = await getCurrentUserData(uid);
        setUser(u);
        setMounted(true);
        u &&
          updateStatus(u.uid, "online")
            .then((done) => {
              console.log("User Online", done);
            })
            .catch((e) => console.log(e));

        // ...
      } else {
        // User is signed out
        // ...
        router.push("/accounts/auth/login");
      }
    });

    getMyIp()
      .then((ip) => {
        console.log("My Ip is ", ip);
        setIp(ip);
      })
      .catch((e) => {
        console.log(e);
      });

    updateLastIp(user.uid, ip)
      .then((done) => {
        console.log("updated ip", done);
      })
      .catch((e) => {
        console.log(e);
      });
    // update the user's location
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setCoords(position.coords);
        },
        (error) => {
          console.log(error);
        }
      );
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [ip]);

  React.useEffect(() => {
    getAllPosts()
      .then((r) => {
        console.log(r);
        setPhotos(r);
        setLoaded(true);
      })
      .catch((e) => console.log(e));
  }, []);

  React.useEffect(() => {
    if (loaded) {
      const photo_query = query(collection(db, "photos"));
      const unsub = onSnapshot(photo_query, (querySnapshot) => {
        console.log("New Post Arrive");
        console.log(
          querySnapshot._snapshot.docChanges.length === photos.length
        );
        if (querySnapshot._snapshot.docChanges.length !== photos.length) {
          setRefresh(true);
        }
      });

      return () => unsub();
    }
  }, [loaded, photos.length]);

  return (
    <div>
      <Head>
        <title>InstaNext | TimeLine</title>
        <meta
          name="description"
          content="Generated by create next app & firebase"
        />
        <script
          src="https://cdn.onesignal.com/sdks/OneSignalSDK.js"
          async=""
        ></script>
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!mounted && <Progress />}
      <Navbar
        setLogout={setLogout}
        user={user}
        setNewPost={setNewPost}
        mounted={mounted}
      />

      <div className={`${styles.container}`}>
        {!loaded && (
          <img src="/loader.gif" alt="loader" className={styles.loader} />
        )}
        <div className={`${styles.app_grid} block lg:grid`}>
          <div className={styles.app_body}>
            <div className="posts">
              {!loaded && (
                <>
                  <BlankPostCard />
                  <BlankPostCard />
                  <BlankPostCard />
                  <BlankPostCard />
                  <BlankPostCard />
                  <BlankPostCard />
                  <BlankPostCard />
                </>
              )}
              {loaded && photos.length > 0
                ? photos.map((photo, index) => {
                    return (
                      <Post
                        key={index}
                        image={photo.data.image_path}
                        time={photo.data.date_created}
                        lat={photo.data.latitude}
                        long={photo.data.longitude}
                        uid={photo.data.user_id}
                        id={photo.id}
                        u={user && user}
                      />
                    );
                  })
                : null}
            </div>
          </div>
          <div className={`${styles.primary_secondary}`}>
            {user && (
              <div className={styles.app_user_home_container}>
                <div className={`${styles.app_home_user_avatar}`}>
                  {user.avatar !== "null" ? (
                    <img src={user.avatar} alt="user" />
                  ) : (
                    <p>SK</p>
                  )}
                </div>
                <div className={styles.app_home_user_info}>
                  <Link href={`/u/${user && user.uid}`}>
                    <a>
                      <p className="font-semibold">{user.name}</p>
                    </a>
                  </Link>
                  <span className="text-gray-500">{user.username}</span>
                </div>
                <div className={styles.auth_switcher}>
                  <span className="text-sky-500 cursor-pointer">Switch</span>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
      {logout && <LogoutModal user={user && user} />}
      {newPost && (
        <NewPostModal
          user={user && user}
          coords={coords}
          setNewPost={setNewPost}
        />
      )}
      {refresh && (
        <RefreshToast
          setPhotos={setPhotos}
          setRefresh={setRefresh}
          setLoaded={setLoaded}
        />
      )}
    </div>
  );
}
